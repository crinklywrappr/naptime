-- This schema should include everything that PostgREST needs to know about
-- in dbStructure (the "schema cache"). The goal is to make this a "real" schema
-- without too much articial objects ("items", "no_pk_table", ...) to be able to
-- use it as a nice reference in the docs at the same time.
--
-- The schema cache is currently used for the following core features:
-- * Embedding relations
-- * Calling RPCs
-- * Creating a Location header after INSERT
--
-- As such, the focus is on all kind of primary keys, foreign key relationships
-- and overloaded functions. Each object's comment describes only a few key features,
-- but may not cover all of them.

-- The world may be hidden to us ...
CREATE SCHEMA world;
--;;
-- ... but hollywood is exposed!
CREATE SCHEMA hollywood;
--;;
SET search_path TO public,hollywood;
--;;


-- TABLE world.persons:
-- * hidden schema
-- * simple pk
CREATE TABLE world.persons (
  PRIMARY KEY (person),
  person     INT
             GENERATED BY DEFAULT AS IDENTITY,
  last_name  TEXT,
  first_name TEXT
);
--;;


-- VIEW persons:
-- * 1 level view chain
-- * hidden base table with same name
-- * base columns from only table
-- * location header from simple pk on view
CREATE VIEW hollywood.persons AS
SELECT *
  FROM world.persons;
--;;


-- TABLE films:
-- * exposed schema
-- * m2o relationship with simple key
-- * self-referencing m2o relationship with simple key
-- * location header from simple pk on table
CREATE TABLE hollywood.films (
  PRIMARY KEY (film),
  film      INT
            GENERATED BY DEFAULT AS IDENTITY,
  person    INT
            CONSTRAINT director
            REFERENCES world.persons (person)
              ON UPDATE CASCADE
              ON DELETE SET NULL,
  sequel_of INT
            REFERENCES films (film)
              ON UPDATE CASCADE
              ON DELETE SET NULL,
  title     TEXT,
  year      SMALLINT,
  rating    SMALLINT,
  language  CHAR(2)
);

--;;

-- TABLE roles:
-- * m2m junction in exposed schema
-- * m2m junction with extra columns
-- * named FK (actor) in exposed table
-- * default-name FK (roles_film_fkey) in exposed table
-- * location header from compound pk on table
CREATE TABLE hollywood.roles (
  PRIMARY KEY (person, film),
  person    INT
            CONSTRAINT actor
            REFERENCES world.persons (person)
              ON UPDATE CASCADE
              ON DELETE CASCADE,
  film      INT
            REFERENCES films (film)
              ON UPDATE CASCADE
              ON DELETE CASCADE,
  character TEXT
);

--;;

-- VIEW directors:
-- * 2 level view chain (V directors -> V persons -> T world.persons)
-- * exposed middle view (actors)
-- * hidden base table with different name
-- * base columns from JOIN
-- * inherited o2m relationship with simple key (films)
CREATE VIEW hollywood.directors (director, last_name, first_name) AS
SELECT persons.*
  FROM films
       JOIN persons USING (person);

--;;

-- VIEW actors:
-- * 2 level view chain (V actors -> V persons -> T world.persons)
-- * exposed middle view (actors)
-- * base columns from FROM
-- * inherited m2m relationship with simple keys (films through roles)
CREATE VIEW hollywood.actors (actor, last_name, first_name) AS
SELECT persons.*
  FROM persons
       JOIN roles USING (person);

--;;

-- TABLE world.competitions:
-- * compound pk
CREATE TABLE world.competitions (
  PRIMARY KEY (name, year),
  name TEXT NOT NULL,
  year SMALLINT NOT NULL
);

--;;

-- VIEW competitions:
-- * location header from compound pk on view
CREATE VIEW hollywood.competitions AS
SELECT *
  FROM world.competitions;

--;;

-- TABLE world.nominations:
-- * m2m junction in hidden schema
-- * named FK (competition) in hidden table
-- * default-name FK (nominations_film_fkey) in hidden table
CREATE TABLE world.nominations (
  UNIQUE (name, year, rank),
  UNIQUE (name, year, film),
  CONSTRAINT competition FOREIGN KEY
  (name, year) REFERENCES world.competitions (name, year)
                 MATCH FULL
                 ON UPDATE CASCADE
                 ON DELETE CASCADE,
  name         TEXT,
  year         SMALLINT,
  rank         SMALLINT,
  film         INT
               REFERENCES films (film)
                 ON UPDATE CASCADE
                 ON DELETE CASCADE
);

--;;

-- VIEW nominations:
-- * m2m junction base table with same name
-- * m2m junction with compound key
-- * m2o relationship with compound key
-- * TODO?: location header without pk but unique constraint
CREATE VIEW hollywood.nominations AS
SELECT *
  FROM world.nominations;

--;;

-- VIEW stats:
-- * sub query in SELECT
-- * sub query in function call in SELECT
-- * aggregate with GROUP BY
CREATE VIEW hollywood.stats (film, no_of_actors, nominations, best_rank) AS
  SELECT film,
         COUNT(*) AS no_of_actors,
         COALESCE(
           (SELECT array_agg(DISTINCT name)
              FROM nominations
             WHERE nominations.film = roles.film),
           '{}'::text[]
         ) AS nominations,
         (SELECT MIN(rank)
            FROM nominations
           WHERE nominations.film = roles.film
         ) AS best_rank
    FROM roles
GROUP BY film;

--;;

-- VIEW bacons_law:
-- https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon
-- * RECURSIVE UNION
-- * TODO: inherited relationships
CREATE RECURSIVE VIEW hollywood.bacons_law (person, bacon_number) AS
  SELECT person, 0
    FROM persons
   WHERE (last_name, first_name) = ('Bacon', 'Kevin')
UNION ALL
  SELECT r2.person, bacon_number + 1
    FROM bacons_law
         JOIN roles AS r1 USING (person)
         JOIN roles AS r2 USING (film);

--;;

-- TABLE world.friends:
-- * m2m junction for self-reference (persons) with simple key
-- * no location header without pk or unique constraint
CREATE TABLE world.friends (
  CONSTRAINT no_schizophrenia
    CHECK (person <> friend),
  CONSTRAINT nondirectional_unique
    EXCLUDE ( ((LEAST(person, friend), GREATEST(person, friend))::world.friends) WITH =),
  person INT
         REFERENCES world.persons (person)
           ON UPDATE CASCADE
           ON DELETE CASCADE,
  friend INT
         REFERENCES world.persons (person)
           ON UPDATE CASCADE
           ON DELETE CASCADE
);

--;;

-- VIEW world.all_friends:
-- * m2m junction without extra columns
-- * UNION to allow nondirectional joins
-- * TODO: inherited relationships with UNION
CREATE VIEW world.all_friends (person, friend) AS
SELECT person, friend
  FROM world.friends
UNION ALL
SELECT friend, person
  FROM world.friends;

--;;

-- VIEW friends:
-- * 2 level view chain (V friends -> V world.all_friends -> T world.friends)
-- * hidden middle view (world.all_friends)
CREATE VIEW hollywood.friends AS
SELECT *
  FROM world.all_friends;

--;;
